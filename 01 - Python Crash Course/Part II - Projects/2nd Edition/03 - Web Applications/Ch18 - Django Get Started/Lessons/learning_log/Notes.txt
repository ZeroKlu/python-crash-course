Setup Steps

 1. Create directory "learning_log"
 2. Navigate to directory you created in terminal
 3. Create a virtual environment
    > python -m venv ll_env
 4. Activate the virtual environment
    > ll_env\scripts\activate
 5. Select your python interpreter
    - CTRL+SHIFT+P
	- Select the one in your venv
 6. Install Django in the venv (Django is an MVC platform for Python)
    > python -m pip install django
 7. (optional) Upgrade PIP in the venv
    > python -m pip install --upgrade pip

Project Creation Steps

 8. Create the project in your venv
    > django-admin startproject learning_log .
	> dir
	  - manage.py (this file reads commands and passes them to django
	> dir learning_log
      - asgi.py (app server gateway interface)
	  - settings.py (this file controls django interactions)
	  - urls.py (this file tells django what pages to build in response to browser requests)
	  - wsgi.py (web server gateway interface)

Database Creation Steps

 9. Create the database
    > python manage.py migrate
	  + db.sqlite (this is the new django database file)

Server Verification Steps

10. Run the Django Server
    > python manage.py runserver
11. Verify that the server is running
    Browser -> http://localhost:8000

TRY IT YOURSELF

Assignment 18.1
New Projects: To get a better idea of what Django does, build a couple of empty projects and look at
              what Django creates. Make a new folder with a simple name, like snap_gram or insta_chat
              (outside of your learning_log directory), navigate to that folder in a terminal, and create
              a virtual environment. Install Django and run the command django-admin.py startproject
              snap_gram. (make sure you include the dot at the end of the command). Look at the files and
              folders this command creates, and compare them to Learning Log. Do this a few times until
              you're familiar with what Django creates when starting a new project. Then delete the project
              directories if you wish.

Open Second Terminal Steps

12. Open a second terminal tab
    - In the terminal click the [+] button
	- If the new terminal doesn't show the (ll_env) heading, repeat activation (step 4)

Start App Steps

13. In the second terminal, start the app
    > python manage.py startapp learning_logs
	 > dir learning_logs
	   - Take note of models.py, admin.py, and views.py

Create Models Steps

14. Create models
    See models.py (Topic class)

15. Activate models
    See settings.py

16. Create DB Migration with Models
    > python manage.py makemigrations learning_logs

17. Migrate Models to DB
    > python manage.py migrate

Set Up Admin Site Steps

18. Make a Super User
    > python manage.py createsuperuser
      - Username: ll_admin
      - Email:    (optional)
      - Password: password

19. Register a Model in Admin Site
    See admin.py

20. Test the site
    Go to http://localhost:8000/admin and log in

Adding Topics Steps

21. Add the "Chess" and "Rock Climbing" Topics
    - Click "Topics"
    - Click "Add Topic"
    - Enter the topic name
    - Click "Save"

Defining the Entry Model Steps

22. Create the Entry model
    See models.py

23. Implement the new model
    > python manage.py makemigrations learning_logs
    > python manage.py migrate

24. Register the new model
    See admin.py

Adding Entries Steps

25. Add three new entries
    - Click "Entries"
    - Click "Add Entry"
    - Select the Topic
    - Add the entry text
    - Click "Save"

    - Entries
      - Chess
        The opening is the first part of the game, roughly the first ten moves or so. In the opening,
        it's a good idea to do three things--bring out your bishops and knights, try to control the
        center of the board, and castle your king.
        
        Of course, these are just guidelines. It will be important to learn when to follow these
        guidelines and when to disregard these suggestions.

      - Chess
        In the opening phase of the game, it's important to bring out your bishops and knights.
        These pieces are powerful and maneuverable enough to play a significant role in the beginning
        moves of a game.

      - Rock Climbing
        One of the most important concepts in climbing is to keep your weight on your feet as much as possible.
        There's a myth that climbers can hang all day on their arms. In reality, good climbers have practiced
        specific ways of keeping their weight over their feet whenever possible.

Verify Added Content Steps

26. Launch an Interactive Shell Session
    > python manage.py shell

    >>> from learning_logs.models import Topic
    >>> topics = Topic.objects.all()
    >>> for topic in topics:
    >>>     print(topic.id, topic)
    <ENTER> Twice
    >>> t = Topic.objects.get(id = 1)
    >>> t.text
    >>> t.date_added
    >>> t.entry_set.all()
    >>> exit()

TRY IT YOURSELF

Assignment 18.2
Short Entries: The __str__() method in the Entry model currently appends an ellipsis to every instance of Entry when
               Django shows it in the admin site or the shell. Add an if statement to the __str__() method that adds
               an ellipsis only if the entry is longer than 50 characters. Use the admin site to add an entry that’s
               fewer than 50 characters in length, and check that it doesn’t have an ellipsis when viewed.

Assignment 18.3
The Django API: When you write code to access the data in your project, you’re writing a query. Skim through the
                documentation for querying your data at https://docs.djangoproject.com/en/2.2/topics/db/queries/.
                Much of what you see will look new to you, but it will be very useful as you start to work on your
                own projects.

Assignment 18.4
Pizzeria: Start a new project called pizzeria with an app called pizzas. Define a model Pizza with a field called name,
          which will hold name values, such as Hawaiian and Meat Lovers. Define a model called Topping with fields called
          pizza and name. The pizza field should be a foreign key to Pizza, and name should be able to hold values such
          as pineapple, Canadian bacon, and sausage. Register both models with the admin site, and use the site to enter
          some pizza names and toppings. Use the shell to explore the data you entered.

Make Home Page Steps

** Three stages: define URLs, write views, and write templates

27. Map the URL
    See learning_log/urls.py

28. Create the application URL map
    See learning_logs/urls.py

29. Create a view
    See views.py

30. Create a templates directory
    See learning_logs/templates

31. Create a template
    See learning_logs/templates/learning_logs/old_index.html

TRY IT YOURSELF

Assignment 18.5
Meal Planner: Consider an app that helps people plan their meals throughout the week. Make a new folder called
              meal_planner, and start a new Django project inside this folder. Then make a new app called meal_plans.
              Make a simple home page for this project.

Assignment 18.6
Pizzeria Home Page: Add a home page to the Pizzeria project you started in Exercise 18-4

Adding Pages Steps

32. Create a parent template
    See .../base.html

33. Inherit base content from parent template
    See learning_logs/templates/learning_logs/index.html

34. Define "Topics" URL pattern
    See learning_logs/urls.py

35. Define "Topics" view
    See views.py

36. Create "Topics" template
    See .../topics.html

37. Link to "Topics" template
    See .../base.html

34. Define individual topic URL pattern
    See learning_logs/urls.py

35. Define individual topic view
    See views.py

36. Create individual topic template
    See .../topics.html

TRY IT YOURSELF

Assignment 18.7
Template Documentation: Skim the Django template documentation at https://docs.djangoproject.com/en/2.2/ref/templates/.
                        You can refer back to it when you’re working on your own projects.

Assignment 18.8
Pizzeria Pages: Add a page to the Pizzeria project from Exercise 18-6 that shows the names of available pizzas.
                Then link each pizza name to a page displaying the pizza’s toppings. Make sure you use template
                inheritance to build your pages efficiently. 


